# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/00_datasets.ipynb (unless otherwise specified).

__all__ = ['div2k_path', 'div2k_train_lr_path', 'div2k_train_lr_x2', 'div2k_train_lr_x3', 'div2k_train_lr_x4',
           'div2k_train_hr', 'div2k_test_lr_path', 'div2k_test_lr_x2', 'div2k_test_lr_x3', 'div2k_test_lr_x4',
           'set5_path', 'set5_lr_path', 'set5_lr_x2', 'set5_lr_x3', 'set5_lr_x4', 'set5_hr', 'set14_path',
           'set14_lr_path', 'set14_lr_x2', 'set14_lr_x3', 'set14_lr_x4', 'set14_hr', 'div2k_train_hr_crop',
           'div2k_train_hr_crop_256', 'div2k_train_hr_crop_256s4', 'crop_image', 'crop_images']

# Cell
from fastai.vision import *

# Cell
div2k_path = Path('/home/jovyan/notebook/datasets/DIV2K')
div2k_train_lr_path = div2k_path/'DIV2K_train_LR_bicubic'
div2k_train_lr_x2 = div2k_train_lr_path/'X2'
div2k_train_lr_x3 = div2k_train_lr_path/'X3'
div2k_train_lr_x4 = div2k_train_lr_path/'X4'
div2k_train_hr = div2k_path/'DIV2K_train_HR'
div2k_test_lr_path = div2k_path/'DIV2K_test_LR_bicubic'
div2k_test_lr_x2 = div2k_test_lr_path/'X2'
div2k_test_lr_x3 = div2k_test_lr_path/'X3'
div2k_test_lr_x4 = div2k_test_lr_path/'X4'

# Cell
set5_path = Path('/home/jovyan/notebook/datasets/Set14')
set5_lr_path = set5_path/'LR_bicubic'
set5_lr_x2 = set5_lr_path/'X2'
set5_lr_x3 = set5_lr_path/'X3'
set5_lr_x4 = set5_lr_path/'X4'
set5_hr = set5_path/'HR'

# Cell
# https://paperswithcode.com/sota/image-super-resolution-on-set14-4x-upscaling
set14_path = Path('/home/jovyan/notebook/datasets/Set14')
set14_lr_path = set14_path/'LR_bicubic'
set14_lr_x2 = set14_lr_path/'X2'
set14_lr_x3 = set14_lr_path/'X3'
set14_lr_x4 = set14_lr_path/'X4'
set14_hr = set14_path/'HR'

# Cell
div2k_train_hr_crop = div2k_path/'DIV2K_train_HR_crop'
div2k_train_hr_crop_256 = div2k_train_hr_crop/'256'
div2k_train_hr_crop_256s4 = div2k_train_hr_crop/'256s4'

# Cell
def crop_image(fname:pathlib.PosixPath, out_path:pathlib.PosixPath, size:int=256, sliding:int=4):
    """ 画像を指定されたサイズでクロップして、out_path に保存する """
    img = PIL.Image.open(fname)
    w, h = img.size
    basename, ext = os.path.splitext(os.path.basename(fname))

    slide = int(size // sliding)
    upper, i = 0, 0
    while upper + size <= h:
        left, j = 0, 0
        while left + size <= w:
            save_fname = out_path/f'{basename}_{i:0>2}{j:0>2}{ext}'
            if not save_fname.exists():
                #box: (left, upper, right, lower)
                c = img.crop((left, upper, left+size, upper+size))
                c.save(save_fname)
            left += slide
            j += 1
        upper += slide
        i += 1

# Cell
def crop_images(images:list, out_path:pathlib.PosixPath, size:int=256, sliding:int=4):
    """ データセットを指定されたサイズでクロップして、out_path に保存する """
    for fname in tqdm(images):
        crop_image(fname, out_path=out_path, size=size, sliding=sliding)