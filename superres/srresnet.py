# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/2017_srresnet.ipynb (unless otherwise specified).

__all__ = ['Pixcelshuffer', 'SRResNet']

# Cell
from fastai import *
from fastai.vision import *
from fastai.callbacks import *

# Cell
class Pixcelshuffer(nn.Module):
    def __init__(self,input_channel,r): #r=upscale_factor
        super(Pixcelshuffer,self).__init__()
        self.layer=nn.Sequential(
            nn.Conv2d(input_channel,256,kernel_size=3,stride=1,padding=1),
            nn.PixelShuffle(r),
            nn.PReLU())

    def forward(self,x):
        return self.layer(x)

# Cell
class SRResNet(nn.Module):

    def __init__(self,image_size):
        super(SRResNet,self).__init__()
        self.image_size = image_size

        self.pre_layer = nn.Sequential(
            nn.Conv2d(3,64,kernel_size=9,stride=1,padding=4),
            nn.PReLU())

        self.residual_layer = nn.Sequential(
            ResidualBlock(64),
            ResidualBlock(64),
            ResidualBlock(64),
            ResidualBlock(64),
            ResidualBlock(64))

        self.middle_layer = nn.Sequential(
            nn.Conv2d(64,64,kernel_size=3,stride=1,padding=1),
            nn.BatchNorm2d(64))

        self.pixcelshuffer_layer=nn.Sequential(
            Pixcelshuffer(64,2),
            Pixcelshuffer(64,2),
            nn.Conv2d(64,3,kernel_size=9,stride=1,padding=4))

    def forward(self,input_image):
        pre = self.pre_layer(input_image)
        res = self.residual_layer(pre)
        middle = self.middle_layer(res)
        middle = middle+pre
        output = self.pixcelshuffer_layer(middle)
        return output